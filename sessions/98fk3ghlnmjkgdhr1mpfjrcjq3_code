// nest the data to group by series name
  var nest = pv.nest(unemp)
      .key(function(d) { return d.series; })
    .sortKeys(function(a,b) {
      a = unemployment.series[a], b = unemployment.series[b];
      return a < b ? -1 : a > b ? 1 : 0;
     })
      .entries();
 
  var data = [],
      fy = function(d) { return d.count; }, // y-axis value
      fx = function(d) { return d.date;},  // x-axis value
      ft = function(d) { return unemployment.series[nest[this.parent.index].key]; }, // label
      w = 550,
      h = 400,
      S = pv.max(nest, function(s) { return s.values.length; }),
      x = pv.Scale.linear(new Date(2000,0,0),new Date(2010,1,0)).range(0,w),
      y = pv.Scale.linear(0,15000).range(0,h),
    p = pv.Scale.linear(0,1).range(0,h),
      offset = \"expand\";
 
  /* The visualization panel. */
  var vis = new pv.Panel()
      .left(30.5).right(150)
      .top(10.5).bottom(28)
      .width(w)
      .height(h);
 
  /* Y-axis gridlines (shown with \"expand\" baseline). */
  vis.add(pv.Rule)
    .visible(function() { return offset==\"expand\"; })
    .data(function() { return p.ticks() })
      .left(-2).right(0)
    .bottom(p)
    .strokeStyle(function(d) { return d==0 ? \"black\" : \"#cccccc\"; })
     .anchor(\"left\").add(pv.Label)
    .text(function(d) { return (100*d).toFixed(0)+\"%\"; });
 
  /* X-axis ticks. */
  vis.add(pv.Dot)
      .data(x.ticks)
      .left(x).bottom(-5)
      .shape(\"tick\").size(5)
      .strokeStyle(\"black\")
     .anchor(\"bottom\").add(pv.Label)
    .text(function(d) { return x.tickFormat(d); });
 
  /* The stacked areas. */
  vis.add(pv.Layout.Stack)
    .layers(function() { return nest.map(function(l) { return l.values; })})
      .orient(\"bottom\")
      .order(\"reverse\")
    .offset(function() { return offset; })
      .x(x.by(fx))
      .y(y.by(fy))
    .layer.add(pv.Area)
    .fillStyle(pv.Colors.category19().by(function() { return this.parent.index; }))
    .anchor(\"right\").add(pv.Label)
    .visible(function() { return !this.index; })
      .textStyle(\"black\")
      .textAlign(\"left\")
      .text(ft);
 
  vis.render();
 