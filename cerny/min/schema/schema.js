// (c) 2006-2008 Robert Cerny
CERNY.require("CERNY.schema","CERNY.text.DateFormat","CERNY.js.Date","CERNY.js.String","CERNY.js.Array");(function(){var method=CERNY.method;var signature=CERNY.signature;CERNY.namespace("schema");CERNY.schema.logger=CERNY.Logger("CERNY.schema");function validate(object,schema,parent){var constraintName,constraint,value,result={},str,subResult,message,log=CERNY.Logger("CERNY.schema.validate");if(!isObject(object)||isNull(object)){throw new Error("object must be an Object.");}
if(!isObject(schema)||isNull(schema)){throw new Error("schema must be an Object.");}
object._parent=parent;for(constraintName in schema){if(schema.hasOwnProperty(constraintName)){constraint=schema[constraintName];value=object[constraintName];log.debug("constraintName: "+constraintName);log.debug("value: "+value);var subResult=validateConstraint(value,constraint,object);log.debug("subResult: "+subResult);if(subResult!==null){result[constraintName]=subResult;}}}
delete(object._parent);return result;};signature(validate,"object","object","object",["undefined","object"]);method(CERNY.schema,"validate",validate);function validateConstraint(value,constraint,object){var result=null,subResult,log=CERNY.Logger("CERNY.schema.validateConstraint");if(constraint&&isRegexp(constraint)){str=value+"";if(!str.match(constraint)){result="'"+str+"' must match "+constraint+".";log.debug("result: "+result);}}else if(isFunction(constraint)){try{subResult=constraint.call(object,value);if(isString(subResult)){result=subResult;}else if(subResult===false){result=CERNY.schema.printValue(value)+" does not conform to constraint.";}}catch(e){result=""+e.message;}}else if(constraint&&isObject(constraint)){if(!isUndefined(value)){subResult=CERNY.schema.validate(value,constraint,object);if(!CERNY.schema.isValid(subResult)){log.debug("subResult: "+subResult);result=subResult;}}}else{if(constraint!==value){result="Must be "+CERNY.schema.printValue(constraint)+" "+"but is "+CERNY.schema.printValue(value)+".";log.debug("result: "+result);}}
return result;}
function isValid(validationResult){for(var propertyName in validationResult){if(validationResult.hasOwnProperty(propertyName)){return false;}}
return true;};signature(isValid,"boolean","object");method(CERNY.schema,"isValid",isValid);function optional(constraint){return function(value){if(value===null||isUndefined(value)){return true;}else{return validateConstraint(value,constraint,this);}}};signature(optional,"function","any");method(CERNY.schema,"optional",optional);function arrayOf(type,min,max){return function(x){var result={},subResult;if(!isNumber(min)){min=null;}
if(!isNumber(max)){max=null;}
if(isArray(x)){if(min!==null&&x.length<min){return"Must have at least "+min+" items, but has only "+x.length+".";}
if(max!==null&&x.length>max){return"Must have no more than "+max+" items, but has "+x.length+".";}
for(var i=0;i<x.length;i++){subResult=validateConstraint(x[i],type,this);if(subResult!==null){result[i]=subResult;}}}else{return"Must be an array.";}
return result;}};signature(arrayOf,"function","any",["undefined","number"],["undefined","number"]);method(CERNY.schema,"arrayOf",arrayOf);function oneOf(array){return function(x){if(isArray(array)){if(array.contains(x)){return true;}else{return false;}}};};signature(oneOf,"function",Array);function number(x){if(isNumber(x)){return true;}
return CERNY.schema.printValue(x)+" must be a number.";};method(CERNY.schema,"number",number);function nonEmptyString(value){if(value&&isNonEmptyString(value)){return true;}
return CERNY.schema.printValue(value)+" must be a non empty string.";};method(CERNY.schema,"nonEmptyString",nonEmptyString);function isoDate(str){if(str&&Date._parse(str,CERNY.text.DateFormat.ISO)!==null){return true;}
return CERNY.schema.printValue(str)+" must be an ISO date string (yyyy-mm-dd).";};signature(isoDate,["boolean","string"],"string");method(CERNY.schema,"isoDate",isoDate);function printValue(value){return"Value "+CERNY.dump(value);};method(CERNY.schema,"printValue",printValue);})();